{"version":3,"sources":["logo.svg","services/api.js","App.js","reportWebVitals.js","index.js"],"names":["api","axios","create","baseURL","headers","App","state","successMessage","errorMessage","statement","alternativeA","alternativeB","alternativeC","alternativeD","alternativeE","subject","correctAlternative","handleSubmit","bind","handleChange","handleCheckChange","letter","onChange","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","name","type","placeholder","Check","label","data-letter","id","this","length","document","getElementById","reset","event","preventDefault","formFilled","setState","post","alternatives","A","B","C","D","E","then","response","error","finally","setTimeout","cleanForm","e","target","value","getAttribute","className","src","logo","alt","Container","rows","map","renderAlternativeInputs","renderAlternativeCheck","span","offset","Button","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6d62f804.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.13c58b5d.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  //baseURL: 'http://localhost:3000/api/v1/',\n  baseURL: 'https://estudei-api.herokuapp.com/api/v1/',\n  headers: {'Content-Type': 'application/json',},\n});\n\nexport default api;\n","import './App.css';\nimport React from 'react';\nimport logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport api from './services/api';\n\nclass App extends React.Component{\n  constructor() {\n    super();\n\n    this.state = {\n      successMessage: \"\",\n      errorMessage: \"\",\n      statement: \"\",\n      alternativeA: \"\",\n      alternativeB: \"\",\n      alternativeC: \"\",\n      alternativeD: \"\",\n      alternativeE: \"\",\n      subject: \"Matemática\",\n      correctAlternative: \"\",\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCheckChange = this.handleCheckChange.bind(this);\n  }\n  renderAlternativeInputs(letter, onChange) {\n    return(\n      <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n        <Form.Label column sm={2}>\n          Alternativa {letter}*\n        </Form.Label>\n        <Col sm={10}>\n          <Form.Control\n            name={\"alternative\" + letter}\n            type=\"text\"\n            onChange={onChange}\n            placeholder={\"Alternativa \" + letter}\n          />\n        </Col>\n      </Form.Group>\n    );\n  }\n  renderAlternativeCheck(letter, onChange) {\n    return (\n      <Form.Check\n        type=\"radio\"\n        onChange={onChange}\n        label={letter}\n        data-letter={letter}\n        name={\"formHorizontalRadios\"}\n        id={\"formHorizontalRadios\" + letter}\n      />\n    );\n  }\n\n  formFilled() {\n    if (this.state.statement.length &&\n      this.state.alternativeA.length &&\n      this.state.alternativeB.length &&\n      this.state.alternativeC.length &&\n      this.state.alternativeD.length &&\n      this.state.alternativeE.length &&\n      this.state.subject.length &&\n      this.state.correctAlternative.length\n      ) {\n        return true\n      } else {\n        return false\n      }\n  }\n\n  cleanForm() {\n    document.getElementById(\"form\").reset();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.formFilled()) {\n      this.setState({\n        errorMessage: \"\",\n      });\n      api.post('/question', {\n        statement: this.state.statement,\n        subject: this.state.subject,\n        correctAlternative: this.state.correctAlternative,\n        alternatives: {\n          A: this.state.alternativeA,\n          B: this.state.alternativeB,\n          C: this.state.alternativeC,\n          D: this.state.alternativeD,\n          E: this.state.alternativeE,\n        }\n      }).then(\n        (response) => this.setState({successMessage: \"Questão enviada com sucesso!\"}) ,\n        (error) => this.setState({errorMessage: \"Algo deu errado!\"})\n        ).finally(\n          setTimeout(() => {  this.cleanForm(); this.setState({successMessage: \"\"}) }, 2000)\n        )\n    } else {\n      this.setState({\n        errorMessage: \"*Todos os campos devem ser preenchidos\"\n      });\n    }\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value,});\n  }\n\n  handleCheckChange(e) {\n    this.setState({\n      correctAlternative: e.target.getAttribute('data-letter'),\n    });\n  }\n  \n  render(){\n    let alternatives = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    \n    return (\n      <div>\n        <div className=\"header\">\n          <img className=\"inverted img-logo\" src={logo} alt=\"logo\"></img>\n        </div>\n      <Container>\n        <Form id='form'>\n          <Form.Group as={Row} controlId=\"formHorizontalText\">\n            <Form.Label column sm={2}>\n              Enunciado*\n            </Form.Label>\n            <Col sm={6}>\n              <Form.Control name=\"statement\" as=\"textarea\" onChange={this.handleChange} rows=\"3\" placeholder=\"Enunciado\" />\n            </Col>\n            <Col>\n            {/*<Form.File\n              className=\"position-relative\"\n              name=\"file\"\n              label=\"File\"\n              onChange={console.log(\"uploaded\")}\n              id=\"validationFormik107\"\n              feedbackTooltip\n            />*/}\n            </Col>\n          </Form.Group>\n\n          {alternatives.map((letter) => {return this.renderAlternativeInputs(letter, this.handleChange)})}\n          \n          <Form.Group as={Row} controlId=\"formHorizontalText\">\n            <Form.Label column sm={2}>\n              Matéria\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control name=\"subject\" onChange={this.handleChange} as=\"select\">\n                <option>Matemática</option>\n                <option>Física</option>\n                <option>Química</option>\n                <option>Biologia</option>\n              </Form.Control>\n            </Col>\n\n          </Form.Group>\n\n          <fieldset>\n            <Form.Group as={Row}>\n              <Form.Label as=\"legend\" column sm={2}>\n                Alternativa correta*\n              </Form.Label>\n              <Col sm={10}>\n                {alternatives.map((letter) => {return this.renderAlternativeCheck(letter, this.handleCheckChange)})}\n              </Col>\n            </Form.Group>\n          </fieldset>\n\n          <Form.Group as={Row}>\n            <Col sm={{ span: 10, offset: 2 }}>\n              <Button onClick={this.handleSubmit} >Enviar</Button>\n              <p className=\"red\" >{this.state.errorMessage}</p>\n              <p className=\"green\" >{this.state.successMessage}</p>\n            </Col>\n          </Form.Group>\n        </Form>\n      </Container>\n      </div>\n);\n}}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}